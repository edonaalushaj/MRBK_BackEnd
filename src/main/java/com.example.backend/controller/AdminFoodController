package com.example.backend.controller;

import com.example.backend.model.Food;
import com.example.backend.service.FoodService;
import com.example.backend.tenant.TenantContext;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/api/admin/foods")
@RequiredArgsConstructor
@PreAuthorize("hasRole('ADMIN')")
@CrossOrigin(origins = "*")
public class AdminFoodController {

    private final FoodService foodService;

    @GetMapping
    public List<Food> getAllFoods() {
        UUID tenantId = UUID.fromString(TenantContext.getCurrentTenant());
        return foodService.getFoodsByTenant(tenantId);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Food> getFood(@PathVariable UUID id) {
        UUID tenantId = UUID.fromString(TenantContext.getCurrentTenant());
        return foodService.getFoodByIdAndTenant(id, tenantId)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<Food> createFood(@RequestBody Food food) {
        UUID tenantId = UUID.fromString(TenantContext.getCurrentTenant());
        food.setId(UUID.randomUUID());
        food.setTenantId(tenantId);
        Food savedFood = foodService.saveFood(food);
        return ResponseEntity.ok(savedFood);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Food> updateFood(@PathVariable UUID id, @RequestBody Food food) {
        UUID tenantId = UUID.fromString(TenantContext.getCurrentTenant());

        return foodService.getFoodByIdAndTenant(id, tenantId)
                .map(existingFood -> {
                    food.setId(id);
                    food.setTenantId(tenantId);
                    return ResponseEntity.ok(foodService.saveFood(food));
                })
                .orElse(ResponseEntity.notFound().build());
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteFood(@PathVariable UUID id) {
        UUID tenantId = UUID.fromString(TenantContext.getCurrentTenant());

        return foodService.getFoodByIdAndTenant(id, tenantId)
                .map(food -> {
                    foodService.deleteFood(id);
                    return ResponseEntity.noContent().<Void>build();
                })
                .orElse(ResponseEntity.notFound().build());
    }
}
