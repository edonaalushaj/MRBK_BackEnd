package com.example.backend.controller;

import com.example.backend.model.Movie;
import com.example.backend.service.MovieService;
import com.example.backend.tenant.TenantContext;
import lombok.RequiredArgsConstructor;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

@RestController
@RequestMapping("/api/admin/movies")
@RequiredArgsConstructor
@PreAuthorize("hasRole('ADMIN')")
@CrossOrigin(origins = "*")
public class AdminMovieController {

    private final MovieService movieService;

    @GetMapping
    public List<Movie> getAllMovies() {
        UUID tenantId = UUID.fromString(TenantContext.getCurrentTenant());
        // Changed from getMoviesByTenant to getAllMoviesByTenant
        return movieService.getAllMoviesByTenant(tenantId);
    }

    @GetMapping("/{id}")
    public ResponseEntity<Movie> getMovie(@PathVariable Long id) {
        UUID tenantId = UUID.fromString(TenantContext.getCurrentTenant());
        return movieService.getMovieByIdAndTenant(id, tenantId)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    @PostMapping
    public ResponseEntity<Movie> createMovie(@RequestBody Movie movie) {
        UUID tenantId = UUID.fromString(TenantContext.getCurrentTenant());
        movie.setTenantId(tenantId);
        Movie savedMovie = movieService.saveMovie(movie);
        return ResponseEntity.ok(savedMovie);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Movie> updateMovie(@PathVariable Long id, @RequestBody Movie movie) {
        UUID tenantId = UUID.fromString(TenantContext.getCurrentTenant());

        return movieService.getMovieByIdAndTenant(id, tenantId)
                .map(existingMovie -> {
                    movie.setId(id);
                    movie.setTenantId(tenantId);
                    return ResponseEntity.ok(movieService.saveMovie(movie));
                })
                .orElse(ResponseEntity.notFound().build());
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteMovie(@PathVariable Long id) {
        UUID tenantId = UUID.fromString(TenantContext.getCurrentTenant());

        return movieService.getMovieByIdAndTenant(id, tenantId)
                .map(movie -> {
                    movieService.deleteMovie(id);
                    return ResponseEntity.noContent().<Void>build();
                })
                .orElse(ResponseEntity.notFound().build());
    }
}
